#!/bin/bash

readonly OPENSCAD="/Applications/OpenSCAD.app/Contents/MacOS/OpenSCAD"
readonly VIEWING_COMMAND="kitty +kitten icat"
readonly SLICER="Ultimaker Cura"

readonly SUCCESS=0
readonly FAIL=1
readonly OSC_ERROR=2
readonly OSC_WARNING=3

function die_with_message
{
  echo $1
  exit $FAIL
}

function check_for_OpenSCAD_errors 
{
  # 2>&1, below, means send stderr to stdout
  local result=$("$OPENSCAD" --hardwarnings -o .osc-data/filecheck.png "$1" 2>&1)
  case "$result" in
    *WARNING*)
      echo "$result"
      return $OSC_WARNING
      ;;
    *ERROR*)
      echo "$result"
      return $OSC_ERROR
      ;;
  esac
  return 0
}

function start_action
{
  clean_action
  if [ -z $1 ]
  then
    die_with_message "You need to specify a .scad file to work on."
  elif [ $(basename "$1" .scad) = $(basename "$1") ]
  then
    die_with_message "Working file should end in .scad"
  fi
  local new_work_file=$1
  mkdir -pv $(dirname "$new_work_file")
  touch "$new_work_file"
  mkdir -p ".osc-data"
  echo $new_work_file > ".osc-data/working_file"
  return 0
}

function check_action
{
  # local can't go on the assignment because local exits with 0 so no test happens
  local work_file
  work_file="$(last_working_file)"
  if (( $? == $FAIL ))
  then
    die_with_message "$work_file"
  fi
  check_for_OpenSCAD_errors "$work_file"
  local result=$?
  if (( result == OSC_WARNING ))
  then
    echo "Failed with warnings."
    return $FAIL
  elif (( $result == $OSC_ERROR ))
  then
    echo "Failed with errors."
    return $FAIL
  else
    echo "Checked. No OpenSCAD errors reported."
    return $SUCCESS
  fi
}

function clean_action
{
  rm -rf .osc-data
}

function info_action
{
  check_action
  echo "-------------------"
  "$OPENSCAD" --info "$(last_working_file)"
}

function preview_action
{
  if ! check_action
  then
    return $FAIL
  fi
  "$OPENSCAD" --hardwarnings -o ".osc-data/preview.png" "$(last_working_file)"
  $VIEWING_COMMAND ".osc-data/preview.png"
  return $SUCCESS
}

function render_action
{
  if ! check_action
  then
    return $FAIL
  fi
  "$OPENSCAD" --render -o ".osc-data/preview.png" "$(last_working_file)"
  kitty +kitten icat ".osc-data/preview.png"
  echo "---------------Note----------------------"
  echo "Render only does preview for some reason." 
  echo "exit code 1 until that's fixed."
  return $FAIL
}

function send_action
{
  if ! check_action
  then
    return $FAIL
  fi
  echo "Off to $SLICER"
  mkdir -p ".osc-data/stl"
  local working_file=$(last_working_file)
  stl_from_scad "$working_file"
  open -a "$SLICER" .osc-data/working_file.stl
}

function stl_from_scad
{
  local scad_file=$1
  local file_without_extension=$(basename "$scad_file" .scad)
  "$OPENSCAD" --hardwarnings -o ".osc-data/working_file.stl" "$scad_file"
}

function last_working_file
{
  if [ -e ".osc-data/working_file" ]
  then
    cat .osc-data/working_file
    return $SUCCESS
  else
    die_with_message "There's nothing in progress. You'll need to start a new work file."
  fi
}

function is_valid_command
{
  local action=$1
  type "${action}_action" 2>/dev/null | grep -q "function"
}

function main
{
  local action="$1"
  shift
  if is_valid_command "$action"
  then
    "${action}_action" "$@"
  else
    die_with_message "That's not a valid command."
  fi
}

main "$@"
